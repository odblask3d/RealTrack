//--------------------------------------------------
// Implementation of class Trajectory
//
// @author: Wild Boar
//
// @date: 2022-06-06
//--------------------------------------------------

#include "Trajectory.h"
using namespace NVL_App;

//--------------------------------------------------
// Constructors and Terminators
//--------------------------------------------------

/**
 * @brief Default Constructor
 */
Trajectory::Trajectory()
{
	_currentPose = Mat_<double>::eye(4,4);
}

//--------------------------------------------------
// Add
//--------------------------------------------------

/**
 * @brief Add a pose to the system
 * @param pose Add a new pose to the collection
 */
void Trajectory::AddPose(Mat& pose)
{
	Mat invPose = pose.inv();
	_currentPose = _currentPose * invPose;
	auto tvec = NVLib::PoseUtils::GetPoseTranslation(_currentPose);
	_trajectory.push_back(Point3d(tvec[0], tvec[1], tvec[2]));
}

//--------------------------------------------------
// Save
//--------------------------------------------------

/**
 * @brief Save the collection to disk
 * @param path The path that we are saving to
 */
void Trajectory::Save(const string& path)
{
	auto writer = ofstream(path);

	// Write the header
	writer << "ply" << endl;
	writer << "format ascii 1.0" << endl;
	writer << "comment Generated by Neural Vision Ltd" << endl;
	writer << "element vertex " << _trajectory.size() << endl;
	writer << "property float x" << endl;
	writer << "property float y" << endl;
	writer << "property float z" << endl;
	writer << "property uchar red" << endl;
	writer << "property uchar green" << endl;
	writer << "property uchar blue" << endl;
	writer << "end_header" << endl;

	// Write the data
	for (auto& vertex : _trajectory) 
	{
		// Retrieve the 3D points
		auto X = vertex.x;
		auto Y = vertex.y;
		auto Z = vertex.z;

		// Retrieve the Color points
		auto R = 255;
		auto G = 0;
		auto B = 0;

		// Write the PLY entry
		char buffer[100];
		sprintf(buffer, "%f %f %f %i %i %i\n", X, Y, Z, B, G, R);
		writer.write(buffer, strlen(buffer));
	}
	
	// Close the writer
	writer.close();
}
